app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000
  analytics:
    segment:
      enabled: true
      writeKey: ${SEGMENT_WRITE_KEY:-foobar}
      testMode: true
      debug: true

organization:
  name: My Company

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

proxysigv4:
  # Check out the proxy-sigv4 plugin documentation for detailed explanation
  # '/some-local-path':
  #   target: 'https://<API ID>.execute-api.<region>.amazonaws.com'
  #   roleArn: 'arn:aws:iam::<account>:role/<name>'
  #   roleSessionName: tempAssumeRoleSession ## optional
  # OR
  # '/some-local-path': https://<API ID>.execute-api.<region>.amazonaws.com

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    guest: {}

scaffolder:
  github:
    token: ${GITHUB_TOKEN}
    visibility: public # or 'internal' or 'private'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../catalog-examples/entities.yaml
    - type: file
      target: ../../catalog-examples/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../catalog-examples/org.yaml
      rules:
        - allow: [User, Group]
